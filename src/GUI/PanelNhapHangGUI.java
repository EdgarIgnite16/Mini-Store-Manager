package GUI;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import BUS.*;
import DTO.ChiTietPhieuNhapDTO;
import DTO.MatHangDTO;
import DTO.NhaCungCapDTO;
import DTO.PhieuNhapHangDTO;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

/**
 * @author edgar
 */
public class PanelNhapHangGUI extends javax.swing.JPanel {
    private static MainFormGUI parentForm;
    private DefaultTableModel modelTable_MH;
    private DefaultTableModel modelTable_CTPN;
    private DefaultComboBoxModel modelComboBox_NCC;
    private ArrayList<MatHangDTO> listMatHangSelected = new ArrayList<>();

    /**
     * Creates new form PanelPhieuNhapGUI
     */
    public PanelNhapHangGUI() {
        initComponents();
        initTableMatHang();
        initNhaCungCap();
        initListCTPN();
    }

    // khởi tạo dữ liệu cho comboBox nhà cung cấp
    private void initNhaCungCap() {
        modelComboBox_NCC = new DefaultComboBoxModel();
        modelComboBox_NCC.addElement("---");
        for (NhaCungCapDTO item : new NhaCungCapBUS().getData()) {
            modelComboBox_NCC.addElement(item.getTenNCC());
        }
        cbNhaCungCap.setModel(modelComboBox_NCC);
    }

    // khởi tạo table Mặt hàng
    private void initTableMatHang() {
        String[] columnNames = new String[]{"Mã MH", "Mã LMH", "Tên MH", "Thành tiền", "Số lượng", "Trạng thái"};
        modelTable_MH = new DefaultTableModel();
        modelTable_MH.setColumnIdentifiers(columnNames);

        try {
            tbDanhSachMatHang.setFont(new Font("Segoe UI", 0, 12));
            tbDanhSachMatHang.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            tbDanhSachMatHang.setModel(modelTable_MH);
            loadMatHang(new MatHangBUS().getData()); // gọi lại hàm load table nhân viên để load lại table
            tbDanhSachMatHang.setDefaultEditor(Object.class, null);
            tbDanhSachMatHang.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {

                }

                @Override
                public void mousePressed(MouseEvent e) {
                    tbDanhSachMatHangMouseListener();
                }

                @Override
                public void mouseReleased(MouseEvent e) {

                }

                @Override
                public void mouseEntered(MouseEvent e) {

                }

                @Override
                public void mouseExited(MouseEvent e) {

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
            _MessageDialogHelper.showErrorDialog(this, ex.getMessage(), "Error !");
        }
    }

    // khởi tạo table chi tiết phiếu nhập
    public void initListCTPN() {
        String[] columnNames = new String[]{"Mã MH", "Tên MH", "Số lượng", "Thành tiền (VNĐ)"};
        modelTable_CTPN = new DefaultTableModel();
        modelTable_CTPN.setColumnIdentifiers(columnNames);

        tbDanhSachMatHangNhap.setFont(new Font("Segoe UI", 0, 12));
        tbDanhSachMatHangNhap.setModel(modelTable_CTPN);
        tbDanhSachMatHangNhap.setDefaultEditor(Object.class, null);
        tbDanhSachMatHangNhap.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {
                tbDanhSachMatHangNhapMouseListener();
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pnThongTinPhieuNhap = new javax.swing.JPanel();
        lbMaPhieuNhap = new javax.swing.JLabel();
        lbMaMatHang = new javax.swing.JLabel();
        lbSoLuongNhap = new javax.swing.JLabel();
        lbNgayNhap = new javax.swing.JLabel();
        lbNhaCungCap = new javax.swing.JLabel();
        txtMaPhieuNhap = new javax.swing.JTextField();
        txtMaMatHang = new javax.swing.JTextField();
        txtSoLuongNhap = new javax.swing.JTextField();
        txtNgayNhap = new javax.swing.JTextField();
        cbNhaCungCap = new javax.swing.JComboBox<>();
        btnLamMoi = new javax.swing.JButton();
        btnTimKiemNV = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnTangSL = new javax.swing.JButton();
        btnGiamSL = new javax.swing.JButton();
        btnHuyDonNhap = new javax.swing.JButton();
        btnXacNhanNhap = new javax.swing.JButton();
        spDanhSachMatHang = new javax.swing.JScrollPane();
        tbDanhSachMatHang = new javax.swing.JTable();
        spDanhSachMatHangNhap = new javax.swing.JScrollPane();
        tbDanhSachMatHangNhap = new javax.swing.JTable();
        pnThanhToanNhapHang = new javax.swing.JPanel();
        lbTongSoLuongNhap = new javax.swing.JLabel();
        lbTongThanhTienNhap = new javax.swing.JLabel();
        txtTongSoLuongNhap = new javax.swing.JTextField();
        txtTongThanhTienNhap = new javax.swing.JTextField();

        pnThongTinPhieuNhap.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin phiếu nhập", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 13))); // NOI18N

        lbMaPhieuNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbMaPhieuNhap.setText("Mã phiếu nhập:");

        lbMaMatHang.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbMaMatHang.setText("Mã mặt hàng:");

        lbSoLuongNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbSoLuongNhap.setText("Số lượng nhập:");

        lbNgayNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbNgayNhap.setText("Ngày nhập:");

        lbNhaCungCap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbNhaCungCap.setText("Nhà cung cấp:");

        txtMaPhieuNhap.setEditable(false);
        txtMaPhieuNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        txtMaMatHang.setEditable(false);
        txtMaMatHang.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        txtSoLuongNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        txtSoLuongNhap.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                txtSoLuongNhapDocumentListener();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                txtSoLuongNhapDocumentListener();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                txtSoLuongNhapDocumentListener();
            }
        });

        txtNgayNhap.setEditable(false);
        txtNgayNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        cbNhaCungCap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.setToolTipText("Làm mới lại form");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnTimKiemNV.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnTimKiemNV.setText("Tìm kiếm");
        btnTimKiemNV.setToolTipText("Tìm kiếm hoá đơn thông qua mã hoá đơn.");
        btnTimKiemNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemNVActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnThem.setEnabled(false);
        btnThem.setText("Thêm mặt hàng");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnXoa.setText("Xoá mặt hàng");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnTangSL.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnTangSL.setText("Tăng SL nhập");
        btnTangSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTangSLActionPerformed(evt);
            }
        });

        btnGiamSL.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnGiamSL.setText("Giảm SL nhập");
        btnGiamSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiamSLActionPerformed(evt);
            }
        });

        btnHuyDonNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnHuyDonNhap.setText("Huỷ đơn nhập");
        btnHuyDonNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyDonNhapActionPerformed(evt);
            }
        });

        btnXacNhanNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnXacNhanNhap.setText("Xác nhận nhập");
        btnXacNhanNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXacNhanNhapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnThongTinPhieuNhapLayout = new javax.swing.GroupLayout(pnThongTinPhieuNhap);
        pnThongTinPhieuNhap.setLayout(pnThongTinPhieuNhapLayout);
        pnThongTinPhieuNhapLayout.setHorizontalGroup(
                pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnThongTinPhieuNhapLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(lbNgayNhap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbSoLuongNhap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbMaMatHang, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbNhaCungCap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbMaPhieuNhap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThongTinPhieuNhapLayout.createSequentialGroup()
                                                .addComponent(btnHuyDonNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                                .addComponent(btnXacNhanNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtMaMatHang)
                                        .addComponent(cbNhaCungCap, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtNgayNhap)
                                        .addComponent(txtSoLuongNhap)
                                        .addComponent(txtMaPhieuNhap, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnTimKiemNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnTangSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnGiamSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        pnThongTinPhieuNhapLayout.setVerticalGroup(
                pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnThongTinPhieuNhapLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbMaPhieuNhap)
                                        .addComponent(txtMaPhieuNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnThem))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnXoa)
                                        .addComponent(txtMaMatHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbMaMatHang))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbSoLuongNhap)
                                        .addComponent(txtSoLuongNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbNgayNhap)
                                        .addComponent(txtNgayNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnTangSL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbNhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbNhaCungCap)
                                        .addComponent(btnGiamSL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(pnThongTinPhieuNhapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnTimKiemNV)
                                        .addComponent(btnLamMoi)
                                        .addComponent(btnHuyDonNhap)
                                        .addComponent(btnXacNhanNhap))
                                .addContainerGap())
        );

        spDanhSachMatHang.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách mặt hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 13))); // NOI18N
        spDanhSachMatHang.setViewportView(tbDanhSachMatHang);

        spDanhSachMatHangNhap.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách mặt hàng nhập", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 13))); // NOI18N
        spDanhSachMatHangNhap.setViewportView(tbDanhSachMatHangNhap);

        pnThanhToanNhapHang.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thanh toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 13))); // NOI18N

        lbTongSoLuongNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbTongSoLuongNhap.setText("Tổng số lượng:");

        lbTongThanhTienNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lbTongThanhTienNhap.setText("Tổng thành tiền:");

        txtTongSoLuongNhap.setEditable(false);
        txtTongSoLuongNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        txtTongThanhTienNhap.setEditable(false);
        txtTongThanhTienNhap.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N

        javax.swing.GroupLayout pnThanhToanNhapHangLayout = new javax.swing.GroupLayout(pnThanhToanNhapHang);
        pnThanhToanNhapHang.setLayout(pnThanhToanNhapHangLayout);
        pnThanhToanNhapHangLayout.setHorizontalGroup(
                pnThanhToanNhapHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnThanhToanNhapHangLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbTongSoLuongNhap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTongSoLuongNhap)
                                .addGap(18, 18, 18)
                                .addComponent(lbTongThanhTienNhap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTongThanhTienNhap)
                                .addContainerGap())
        );
        pnThanhToanNhapHangLayout.setVerticalGroup(
                pnThanhToanNhapHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnThanhToanNhapHangLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnThanhToanNhapHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbTongSoLuongNhap)
                                        .addComponent(txtTongSoLuongNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtTongThanhTienNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbTongThanhTienNhap))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(spDanhSachMatHang)
                                        .addComponent(pnThongTinPhieuNhap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pnThanhToanNhapHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spDanhSachMatHangNhap, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(spDanhSachMatHangNhap, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pnThanhToanNhapHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(pnThongTinPhieuNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(spDanhSachMatHang, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
    }// </editor-fold>

    // xử lí btn làm mới
    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {
        refreshData();
    }

    // xử lí btn tìm kiếm
    private void btnTimKiemNVActionPerformed(java.awt.event.ActionEvent evt) {
        new DialogTimKiemGUI(new Frame(), true, "MH").setVisible(true); // mở form tìm kiếm
        MatHangDTO matHangDTO = _SaveData.matHangTimThay;
        if (matHangDTO != null) {
            ArrayList<MatHangDTO> listMatHang = new ArrayList<>();
            listMatHang.add(matHangDTO);

            loadMatHang(listMatHang); // khởi tạo lại table khách hàng
            // load các thông tin của mặt hàng lên text field

            // reset lại data tìm kiếm trong local
            _SaveData.khachHangTimThay = null;
        }
    }

    // xử lí btn thêm
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {
        StringBuilder sb = new StringBuilder();

        // kiểm tra số nhập vào có phải là số hay không
        _DataValidator.validateIsNumberAndInteger(txtSoLuongNhap, sb, "Vui lòng nhập vào một số nguyên dương bất kì!");

        if (sb.length() > 1) {
            _MessageDialogHelper.showErrorDialog(parentForm, String.valueOf(sb), "Vui lòng kiểm tra lại");
        } else {
            try {
                MatHangDTO matHangDTO = tbDanhSachMatHangMouseListener();
                if (matHangDTO != null) {
                    if (checkItemExist(matHangDTO)) {
                        _MessageDialogHelper.showErrorDialog(parentForm,
                                "Mặt hàng đã tồn tại trong Danh Sách Nhập Hàng!", "Vui lòng chọn lại");
                    } else {
                        if (Integer.parseInt(txtSoLuongNhap.getText()) > 1) {
                            MatHangBUS.increaseSoLuong(matHangDTO, Integer.parseInt(txtSoLuongNhap.getText().trim())); // cập nhật số lượng của mặt hàng đó
                            MatHangBUS.increaseThanhTien(matHangDTO, Integer.parseInt(txtSoLuongNhap.getText().trim())); // cập nhật tổng thành tiền của mặt hàng đó
                            listMatHangSelected.add(matHangDTO); // add mặt hàng chọn vào list
                            loadCTPN(listMatHangSelected); // load lại form ctpn
                            loadThanhToan(listMatHangSelected); // load lại form thanh toán
                            txtSoLuongNhap.setText(""); // clear txt số lượng nhập
                            btnThem.setEnabled(false); // cập nhật lại nút thêm
                        } else {
                            _MessageDialogHelper.showErrorDialog(parentForm,
                                    "Số lượng mặt hàng muốn nhập phải lớn hơn 1!", "Vui lòng kiểm tra số lượng");
                        }
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                _MessageDialogHelper.showErrorDialog(parentForm, "Thêm mặt hàng nhập thất bại!", "Failure Query Data");
            }
        }
    }

    // xử lí btn xoá
    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {
        MatHangDTO matHangDTO = tbDanhSachMatHangNhapMouseListener();
        if (matHangDTO != null) {
            MatHangBUS.resetSoLuong(matHangDTO); // reset lại số lượng của mặt hàng bị xoá
            MatHangBUS.resetThanhTien(matHangDTO); // reset lại tổng thành tiền của mặt hàng bị xoá
            listMatHangSelected.remove(matHangDTO); // xoá mặt hàng đó ra khỏi danh sách nhập
            loadCTPN(listMatHangSelected); // load lại form ctpn
            loadThanhToan(listMatHangSelected); // load lại form thanh toán
        }
    }

    // xử lí btn tăng sl
    private void btnTangSLActionPerformed(java.awt.event.ActionEvent evt) {
        MatHangDTO matHangDTO = tbDanhSachMatHangNhapMouseListener();
        if (matHangDTO != null) {
            new DialogThemGUI(new Frame(), true, matHangDTO, "PN").setVisible(true); // tạo form nhập số lượng xoá

            int soLuongThem = _SaveData.soLuongThem; // lấy ra số lượng sản phẩm muốn thêm vào
            if(soLuongThem <= 1000) {
                MatHangBUS.increaseSoLuong(matHangDTO, soLuongThem); // tăng số lượng hiện tại trong danh sách nhập
                MatHangBUS.increaseThanhTien(matHangDTO, soLuongThem); // tăng thành tiền hiện tại trong danh sách nhập
                loadCTPN(listMatHangSelected); // load lại form ctpn
                loadThanhToan(listMatHangSelected); // load lại form thanh toán
            } else {
                _MessageDialogHelper.showErrorDialog(parentForm,
                        "Số lượng thêm không được vượt quá 1000!\nVui lòng nhập lại số lượng thêm",
                        "Tăng số lượng xoá thất bại");
            }

            // reset lại số lượng thêm trong local
            _SaveData.soLuongThem = 0;
        }
    }

    // xử lí btn giảm sl
    private void btnGiamSLActionPerformed(java.awt.event.ActionEvent evt) {
        MatHangDTO matHangDTO = tbDanhSachMatHangNhapMouseListener();
        if (matHangDTO != null) {
            new DialogXoaGUI(new Frame(), true, matHangDTO, "PN").setVisible(true); // tạo form nhập số lượng xoá

            int soLuongxoa = _SaveData.soLuongXoa; // lấy số lượng cần xoá
            if(soLuongxoa < matHangDTO.soLuong_hientai) {
                MatHangBUS.decreaseSoLuong(matHangDTO, soLuongxoa); // giảm số lượng hiện tại trong danh sách nhập
                MatHangBUS.decreaseThanhTien(matHangDTO, soLuongxoa); // giảm thành tiền hiện tại trong danh sách nhập
                loadCTPN(listMatHangSelected); // load lại form ctpn
                loadThanhToan(listMatHangSelected); // load lại form thanh toán
            } else {
                _MessageDialogHelper.showErrorDialog(parentForm,
                        "Số lượng xoá không thể vượt quá số lượng hiện tại!\nVui lòng nhập lại số lượng xoá",
                        "Giảm số lượng xoá thất bại");
            }

            // reset lại số lượng xoá trong local
            _SaveData.soLuongXoa = 0;
        }
    }

    // xử lí btn xác nhận hoá đơn nhập
    private void btnXacNhanNhapActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (_MessageDialogHelper.showConfirmDialog(parentForm,
                    "Bạn có muốn xác nhận đơn nhập không!", "Xác nhận đơn nhập") == JOptionPane.YES_OPTION) {
                // kiểm tra có chọn nhà cung cấp hay chưa
                NhaCungCapDTO nhaCungCapDTO = new NhaCungCapBUS().getItemByName((String) cbNhaCungCap.getSelectedItem());
                if (nhaCungCapDTO != null) {
                    // Kiểm tra trong giỏ hàng phải có sản phẩm
                    if (listMatHangSelected.size() > 0) {
                        // khởi tạo đối tượng mặt hàng
                        PhieuNhapHangDTO phieuNhapHangDTO = new PhieuNhapHangDTO();
                        phieuNhapHangDTO.setMaPhieuNhap(txtMaPhieuNhap.getText());
                        phieuNhapHangDTO.setMaNCC(nhaCungCapDTO.getMaNCC());
                        phieuNhapHangDTO.setNgayNhap(txtNgayNhap.getText());

                        // khởi tạo đối tượng bus của phiếu nhập và cập nhật dữ liệu phiếu nhập lên csdl
                        PhieuNhapHangBUS phieuNhapHangBUS = new PhieuNhapHangBUS();
                        phieuNhapHangBUS.insertItem(phieuNhapHangDTO); // khởi tạo dữ liệu

                        // khởi tạo đối tượng chi tiết phiếu nhập và cập nhật dữ liệu lên CTPN, mặt hàng
                        ChiTietPhieuNhapBUS chiTietPhieuNhapBUS = new ChiTietPhieuNhapBUS();
                        MatHangBUS matHangBUS = new MatHangBUS();
                        for (MatHangDTO item : listMatHangSelected) {
                            ChiTietPhieuNhapDTO chiTietPhieuNhapDTO = new ChiTietPhieuNhapDTO();
                            chiTietPhieuNhapDTO.setMaPhieuNhap(txtMaPhieuNhap.getText());
                            chiTietPhieuNhapDTO.setMaMH(item.getMaMH());
                            chiTietPhieuNhapDTO.setSoLuong(item.soLuong_hientai);
                            chiTietPhieuNhapBUS.insertItem(chiTietPhieuNhapDTO); // khởi tạo dữ liệu

                            // Cập nhật số lượng hàng của từng mặt hàng có trong list
                            int soLuong = item.getSoLuong() + item.soLuong_hientai;
                            item.setSoLuong(soLuong);
                            matHangBUS.updateItem(item);
                        }


                        // kết thúc
                        _MessageDialogHelper.showMessageDialog(parentForm,
                                "Nhập hàng thành công!", "Yêu cầu nhập thành công");
                        clearAllData(); // reset lại form
                    } else { // trường hợp ngược lại
                        _MessageDialogHelper.showErrorDialog(parentForm,
                                "Vui lòng tiến hành chọn mặt hàng để nhập!", "Yêu cầu chọn dữ liệu");
                    }
                } else {
                    _MessageDialogHelper.showErrorDialog(parentForm,
                            "Vui lòng chọn nhà cung cấp!", "Yêu cầu chọn dữ liệu");
                }
            }
        } catch (Exception ex) {
            _MessageDialogHelper.showErrorDialog(parentForm,
                    "Đã có lỗi sảy ra!\nLỗi: " + ex.getMessage(), "Lỗi truy xuất dữ liệu");
        }
    }

    // xử lí btn huỷ hoá đơn nhập
    private void btnHuyDonNhapActionPerformed(java.awt.event.ActionEvent evt) {
        if (_MessageDialogHelper.showConfirmDialog(parentForm,
                "Bạn có muốn hủy đơn nhập không!", "Hủy đơn nhập") == JOptionPane.YES_OPTION) {
            clearAllData(); // gọi lại hàm để clean toàn bộ dữ liệu trong form
        }
    }

    // bắt sự kiện ấn vào table Danh sách MH
    private MatHangDTO tbDanhSachMatHangMouseListener() {
        try {
            int selectedRow = tbDanhSachMatHang.getSelectedRow();
            String idMH = String.valueOf(tbDanhSachMatHang.getValueAt(selectedRow, 0));
            MatHangDTO matHangDTO = MatHangBUS.getItemByID(idMH);

            if (matHangDTO != null) {
                loadForm(matHangDTO); // load form mặt hàng
                return matHangDTO;
            }
            return null;
        } catch (Exception ex) {
            _MessageDialogHelper.showErrorDialog(parentForm,
                    "Vui lòng chọn một dòng trong danh sách mặt hàng!", "Yêu cầu chọn dữ liệu");
            return null;
        }
    }

    // bắt sự kiện ấn vào table Danh sách MH nhập
    private MatHangDTO tbDanhSachMatHangNhapMouseListener() {
        try {
            int selectedRow = tbDanhSachMatHangNhap.getSelectedRow();
            String idMH = String.valueOf(tbDanhSachMatHangNhap.getValueAt(selectedRow, 0));
            return MatHangBUS.getItemByID(idMH);

        } catch (Exception ex) {
            _MessageDialogHelper.showErrorDialog(parentForm,
                    "Vui lòng chọn một dòng trong danh sách mặt hàng!", "Yêu cầu chọn dữ liệu");
            return null;
        }
    }

    // hàm bắt sự kiện onChange của txt
    private void txtSoLuongNhapDocumentListener() {
        btnThem.setEnabled(!txtSoLuongNhap.getText().isEmpty());
        btnThem.setEnabled(!txtMaPhieuNhap.getText().isEmpty());
    }

    //===================================================================================================//
    // làm mới lại form mặt hàng và txt thông tin
    private void refreshData() {
        txtMaMatHang.setText(""); // refresh form mã mặt hàng
        txtMaPhieuNhap.setText(""); // refresh form tên mã phiêu nhập
        txtSoLuongNhap.setText(""); // refresh form số lượng nhập
        txtNgayNhap.setText(""); // refresh ngày nhập
        cbNhaCungCap.setSelectedIndex(0);
        tbDanhSachMatHang.clearSelection();

        btnThem.setEnabled(false);
        loadMatHang(new MatHangBUS().getData()); // load lại mặt hàng
    }

    // hàm xoá sạch dữ liệu trong form
    private void clearAllData() {
        refreshData();
        loadCTPN(new ArrayList<>()); // load lại mặt hàng
        listMatHangSelected.clear(); // clear ds nhập

        txtTongSoLuongNhap.setText(""); // đặt lại tổng số lượng nhập
        txtTongThanhTienNhap.setText(""); // đặt lại tổng thành tiền nhập

        // reset lại các thông số: Số lượng, Thành tiền của từng mặt hàng đã xét trước đó
        for (MatHangDTO item : new MatHangBUS().getData()) {
            MatHangBUS.resetSoLuong(item);
            MatHangBUS.resetThanhTien(item);
        }
    }

    // hàm load các txt thông tin
    public void loadForm(MatHangDTO matHangDTO) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        txtNgayNhap.setText(dateFormat.format(new Date()));
        txtMaPhieuNhap.setText(handleMPN());
        txtMaMatHang.setText(matHangDTO.getMaMH());
    }

    // hàm load form mặt hàng
    private void loadMatHang(ArrayList<MatHangDTO> listMatHang) {
        modelTable_MH.setRowCount(0);
        for (MatHangDTO item : listMatHang) {
            modelTable_MH.addRow(new Object[]{
                    item.getMaMH(),
                    item.getMaLMH(),
                    item.getTenMH(),
                    item.getThanhTien(),
                    item.getSoLuong(),
                    item.getStatus() == 1 ? "Còn bán" : "Ngừng bán"
            });
        }
    }

    // hàm load form chi tiết phiếu nhập (danh sách nhập hàng)
    private void loadCTPN(ArrayList<MatHangDTO> listMatHang) {
        modelTable_CTPN.setRowCount(0);
        for (MatHangDTO item : listMatHang) {
            modelTable_CTPN.addRow(new Object[]{
                    item.getMaMH(),
                    item.getTenMH(),
                    item.soLuong_hientai,
                    item.thanhTien_hientai
            });
        }
    }

    // hàm load form thanh toán
    public void loadThanhToan(ArrayList<MatHangDTO> listMatHang) {
        double tongTien = 0;
        int tongSoLuong = 0;

        // tính toán tổng tiền và tổng số lượng
        for (MatHangDTO item : listMatHang) {
            tongSoLuong += item.soLuong_hientai;
            tongTien += item.thanhTien_hientai;
        }

        txtTongSoLuongNhap.setText(String.format("%d sản phẩm", tongSoLuong));
        txtTongThanhTienNhap.setText(String.format("%.2f VNĐ", tongTien));
    }

    // xử lí mã phiếu nhập
    public String handleMPN() {
        String maPN = "PN";
        String[] arr = txtNgayNhap.getText().split(" ");
        for (int i = 0; i < arr.length; i++) {
            if (i == 0) {
                String[] supArr = arr[i].split("-");
                for (String item : supArr) {
                    maPN = maPN.concat(item);
                }
            } else {
                String[] supArr = arr[i].split(":");
                for (String item : supArr) {
                    maPN = maPN.concat(item);
                }
            }
        }
        return maPN;
    }

    // kiểm tra hàng có tồn tại trong danh sách hàng đã chọn
    public boolean checkItemExist(MatHangDTO matHangDTO) {
        for (MatHangDTO item : listMatHangSelected) {
            if (item.getMaMH().equals(matHangDTO.getMaMH())) {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnGiamSL;
    private javax.swing.JButton btnHuyDonNhap;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnTangSL;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiemNV;
    private javax.swing.JButton btnXacNhanNhap;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbNhaCungCap;
    private javax.swing.JLabel lbMaMatHang;
    private javax.swing.JLabel lbMaPhieuNhap;
    private javax.swing.JLabel lbNgayNhap;
    private javax.swing.JLabel lbNhaCungCap;
    private javax.swing.JLabel lbSoLuongNhap;
    private javax.swing.JLabel lbTongSoLuongNhap;
    private javax.swing.JLabel lbTongThanhTienNhap;
    private javax.swing.JPanel pnThanhToanNhapHang;
    private javax.swing.JPanel pnThongTinPhieuNhap;
    private javax.swing.JScrollPane spDanhSachMatHang;
    private javax.swing.JScrollPane spDanhSachMatHangNhap;
    private javax.swing.JTable tbDanhSachMatHang;
    private javax.swing.JTable tbDanhSachMatHangNhap;
    private javax.swing.JTextField txtMaMatHang;
    private javax.swing.JTextField txtMaPhieuNhap;
    private javax.swing.JTextField txtNgayNhap;
    private javax.swing.JTextField txtSoLuongNhap;
    private javax.swing.JTextField txtTongSoLuongNhap;
    private javax.swing.JTextField txtTongThanhTienNhap;
    // End of variables declaration
}

